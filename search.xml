<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RL算法之DQN与Dueling DQN</title>
    <url>/2024/09/22/DQN/</url>
    <content><![CDATA[<h1 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h1><p>  DQN（Deep Q Network）是 Q-Learning 的神经网络形式，相比于普通的Q-Learning，它做出了如下的改进与性能优化：</p>
<ul>
<li><p>使用两个独立的神经网络：目标Q网络与当前Q网络，通过最小化损失函数来更新当前Q网络，当更新到达一定次数后，再更新目标Q网络。 </p>
</li>
<li><p>引入经验回放池，将智能体的信息记录下来，并存储在一个回放缓冲区中。在训练时，从回放缓冲区中随机抽取一小批数据进行训练。这使样本满足独立假设，并提高样本的效率，每一个样本可以被使用多次，十分适合神经网络的梯度学习。</p>
</li>
</ul>
<h2 id="DQN网络的更新原则"><a href="#DQN网络的更新原则" class="headerlink" title="DQN网络的更新原则"></a>DQN网络的更新原则</h2><p>简单来说，DQN的更新是为了最小化这么一个损失函数：</p>
<script type="math/tex; mode=display">
L(\theta) = \mathbb{E}_{(s, a, r, s')} \left[ \left( r + \gamma \max_{a'} Q_{\text{target}}(s', a'; \theta_{\text{target}}) - Q(s, a; \theta) \right)^2 \right]</script><p>其中：</p>
<ul>
<li><p>$\theta$ 是当前 Q 网络的参数</p>
</li>
<li><p>$\theta_{\text{target}}$ 是目标 Q 网络的参数</p>
</li>
<li><p>$s$ 和 $a$ 是当前状态和动作</p>
</li>
<li><p>$r$ 是即时奖励，$γ$ 是折扣因子</p>
</li>
<li><p>$s’$ 是下一状态，$a’$ 是下一步动作</p>
</li>
</ul>
<h2 id="DQN算法实现"><a href="#DQN算法实现" class="headerlink" title="DQN算法实现"></a>DQN算法实现</h2><h3 id="首先是定义经验回放池，用于存放样本与取出样本"><a href="#首先是定义经验回放池，用于存放样本与取出样本" class="headerlink" title="首先是定义经验回放池，用于存放样本与取出样本"></a>首先是定义经验回放池，用于存放样本与取出样本</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#经验回放池</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReplayBuffer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,capacity</span>):</span><br><span class="line">        <span class="comment"># collections.deque双端队列，支持从两端快速地添加和删除元素,当队列达到maxlen时移除最早的元素</span></span><br><span class="line">        <span class="variable language_">self</span>.buffer = collections.deque(maxlen=capacity)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将数据加入buffer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,state,action,reward,next_state,done</span>):</span><br><span class="line">        <span class="variable language_">self</span>.buffer.append((state,action,reward,next_state,done))</span><br><span class="line"></span><br><span class="line">        <span class="comment">#从buffer中采样数据，数据量为batch_size</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self,batch_size</span>): </span><br><span class="line">        <span class="comment"># 随机采样</span></span><br><span class="line">        transitions = random.sample(<span class="variable language_">self</span>.buffer,batch_size)</span><br><span class="line">        <span class="comment"># 解包transition，将同一维度的元素聚合在一起,如所有state放在一个state列表中</span></span><br><span class="line">        state,action,reward,next_state,done = <span class="built_in">zip</span>(*transitions)</span><br><span class="line">        <span class="keyword">return</span> np.array(state),action,reward,np.array(next_state),done</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 检查当前buffer中的数据量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.buffer)</span><br></pre></td></tr></table></figure>
<h3 id="由于我们在Cartpole环境中实现DQN，神经网络不必复杂，只需定义一个只有一层隐藏层的神经网络"><a href="#由于我们在Cartpole环境中实现DQN，神经网络不必复杂，只需定义一个只有一层隐藏层的神经网络" class="headerlink" title="由于我们在Cartpole环境中实现DQN，神经网络不必复杂，只需定义一个只有一层隐藏层的神经网络"></a>由于我们在Cartpole环境中实现DQN，神经网络不必复杂，只需定义一个只有一层隐藏层的神经网络</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一层隐藏层的神经网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Qnet</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,state_dim,hidden_dim,action_dim</span>):</span><br><span class="line">        <span class="comment"># 调用torch.nn.Module父类的构造函数</span></span><br><span class="line">        <span class="built_in">super</span>(Qnet,<span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = torch.nn.Linear(state_dim,hidden_dim)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = torch.nn.Linear(hidden_dim,action_dim)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐藏层使用ReLU激活函数（去负为0取最大）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.fc2(x)</span><br></pre></td></tr></table></figure>
<p>在这个神经网络中，输入层输入的是环境空间中的状态，在Cartpole环境中，状态空间是一个维数为4的向量，即为（车的位置，车的速度，杆的角速度，杆尖端的速度），输出层得到的是执行所有动作后的Q。</p>
<details class="folding-tag" cyan><summary> 神经网络运算 </summary>
              <div class='content'>
              <p>简单来说，神经网络是在执行一个矩阵运算。</p><p>我们把输入的状态矩阵设为$x$，它的形状为[batch_size, state_dim]，batch_size为取出的样本数量，state_dim是状态空间的维度。</p><p>我们将$x$输入到第一个线性层fc1中，fc1计算$x=x·W_1+b_1$，其中$W_1$的形状为[state_dim, hidden_dim]。然后对计算结果应用ReLU激活函数，将所有负值变为0,这是为了增加网络的非线性性质。之后再进入fc2，进行线性运算，得到输出。</p>
              </div>
            </details>
<h3 id="接下来定义DQN算法"><a href="#接下来定义DQN算法" class="headerlink" title="接下来定义DQN算法"></a>接下来定义DQN算法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DQN</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,state_dim,hidden_dim,action_dim,learning_rate,gamma,epsilon,target_update,device</span>):</span><br><span class="line">        <span class="variable language_">self</span>.action_dim = action_dim</span><br><span class="line">        <span class="comment"># 当前网络</span></span><br><span class="line">        <span class="variable language_">self</span>.q_net = DQN_Net.Qnet(state_dim,hidden_dim,<span class="variable language_">self</span>.action_dim).to(device)</span><br><span class="line">        <span class="comment"># target网络</span></span><br><span class="line">        <span class="variable language_">self</span>.taget_q_net = DQN_Net.Qnet(state_dim,hidden_dim,<span class="variable language_">self</span>.action_dim).to(device)</span><br><span class="line">        <span class="comment"># 使用Adam优化器</span></span><br><span class="line">        <span class="variable language_">self</span>.optimizer = torch.optim.Adam(<span class="variable language_">self</span>.q_net.parameters(),lr=learning_rate)</span><br><span class="line">        <span class="comment"># 折扣因子</span></span><br><span class="line">        <span class="variable language_">self</span>.gamma = gamma</span><br><span class="line">        <span class="comment"># ε-Greedy策略</span></span><br><span class="line">        <span class="variable language_">self</span>.epsilon = epsilon</span><br><span class="line">        <span class="comment"># targer网络更新频率</span></span><br><span class="line">        <span class="variable language_">self</span>.taget_update = target_update</span><br><span class="line">        <span class="comment"># 记录更新次数</span></span><br><span class="line">        <span class="variable language_">self</span>.count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 设备选择</span></span><br><span class="line">        <span class="variable language_">self</span>.device = device</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据ε-Greedy策略选择动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">take_action</span>(<span class="params">self,state</span>):</span><br><span class="line">        <span class="keyword">if</span> np.random.random() &lt; <span class="variable language_">self</span>.epsilon:</span><br><span class="line">            <span class="comment"># 生成一个[0,action_dim-1]的随机整数</span></span><br><span class="line">            action = np.random.randint(<span class="variable language_">self</span>.action_dim)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># state变为一个形状为(1, 4)的PyTorch张量，代表一个状态下包含的四种信息</span></span><br><span class="line">            state = torch.tensor([state],dtype=torch.<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">            <span class="comment"># 返回state下每个动作的q值</span></span><br><span class="line">            action = <span class="variable language_">self</span>.q_net.forward(state).argmax().item()</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数更新   </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self,transition_dict</span>):</span><br><span class="line">        <span class="comment"># 将state转换为一个形状为(1, 4)的二维张量，以便将其输入到网络中</span></span><br><span class="line">        states = torch.tensor(transition_dict[<span class="string">&#x27;states&#x27;</span>],dtype=torch.<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        <span class="comment"># 将actions转换为二维张量</span></span><br><span class="line">        actions = torch.tensor(transition_dict[<span class="string">&#x27;actions&#x27;</span>]).view(-<span class="number">1</span>, <span class="number">1</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        rewards = torch.tensor(transition_dict[<span class="string">&#x27;rewards&#x27;</span>],dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        next_states = torch.tensor(transition_dict[<span class="string">&#x27;next_states&#x27;</span>],dtype=torch.<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        dones = torch.tensor(transition_dict[<span class="string">&#x27;dones&#x27;</span>],dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        <span class="comment"># 当前q值</span></span><br><span class="line">        q_values = <span class="variable language_">self</span>.q_net.forward(states).gather(<span class="number">1</span>, actions)</span><br><span class="line">        <span class="comment"># 下个状态的最大q值</span></span><br><span class="line">        max_next_q_values = <span class="variable language_">self</span>.taget_q_net.forward(next_states).<span class="built_in">max</span>(<span class="number">1</span>)[<span class="number">0</span>].view(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># TD误差目标</span></span><br><span class="line">        q_targets = rewards + <span class="variable language_">self</span>.gamma * max_next_q_values * (<span class="number">1</span>-dones)</span><br><span class="line">        <span class="comment"># 均方误差损失函数</span></span><br><span class="line">        dqn_loss = torch.mean(F.mse_loss(q_values, q_targets))  </span><br><span class="line">        <span class="comment"># PyTorch中默认梯度会累积,这里需要显式将梯度置为0</span></span><br><span class="line">        <span class="variable language_">self</span>.optimizer.zero_grad()  </span><br><span class="line">         <span class="comment"># 反向传播更新参数</span></span><br><span class="line">        dqn_loss.backward() </span><br><span class="line">        <span class="variable language_">self</span>.optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.count % <span class="variable language_">self</span>.taget_update == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 更新target网络</span></span><br><span class="line">            <span class="variable language_">self</span>.taget_q_net.load_state_dict(<span class="variable language_">self</span>.q_net.state_dict()) </span><br><span class="line">        <span class="variable language_">self</span>.count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>take_action函数利用ε-Greedy策略选择输入状态为state时下一步采取什么动作。</p>
<p>update函数用于更新当前Q网络与目标Q网络的参数</p>
<h3 id="最后是参数设定与开始训练"><a href="#最后是参数设定与开始训练" class="headerlink" title="最后是参数设定与开始训练"></a>最后是参数设定与开始训练</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> DQN_Net</span><br><span class="line"><span class="keyword">import</span> DQN_Algorithm</span><br><span class="line"><span class="keyword">import</span> rl_utils</span><br><span class="line">np.bool8 = np.<span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">lr = <span class="number">2e-3</span></span><br><span class="line">num_episodes = <span class="number">500</span></span><br><span class="line">hidden_dim = <span class="number">128</span></span><br><span class="line">gamma = <span class="number">0.98</span></span><br><span class="line">epsilon = <span class="number">0.01</span></span><br><span class="line">target_update = <span class="number">10</span></span><br><span class="line">buffer_size = <span class="number">10000</span></span><br><span class="line">minimal_size = <span class="number">500</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span>) <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化环境，定义环境实例</span></span><br><span class="line">env_name = <span class="string">&#x27;CartPole-v0&#x27;</span></span><br><span class="line">env = gym.make(env_name)</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">0</span>)</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">env.reset(seed=<span class="number">0</span>)</span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">replay_buffer = DQN_Net.ReplayBuffer(buffer_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取环境状态空间的维度</span></span><br><span class="line">state_dim = env.observation_space.shape[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取动作空间的维度</span></span><br><span class="line">action_dim = env.action_space.n</span><br><span class="line"></span><br><span class="line">agent = DQN_Algorithm.DQN(state_dim, hidden_dim, action_dim, lr, gamma, epsilon,</span><br><span class="line">            target_update, device)</span><br><span class="line"></span><br><span class="line">return_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">int</span>(num_episodes / <span class="number">10</span>), desc=<span class="string">&#x27;Iteration %d&#x27;</span> % i) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(num_episodes / <span class="number">10</span>)):</span><br><span class="line">                episode_return = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 找到初始状态</span></span><br><span class="line">                state = env.reset()</span><br><span class="line">                <span class="comment"># 由于env.reset()返回值是一个元组，其中第一个元素是包含状态的NumPy数组，第二个元素是额外的信息字典，我们需要取第一个Numpy数组</span></span><br><span class="line">                state = state[<span class="number">0</span>]</span><br><span class="line">                done = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">                    <span class="comment"># 在state状态根据ε-Greedy选择一个动作</span></span><br><span class="line">                    action = agent.take_action(state)</span><br><span class="line">                    next_state,reward,done,truncated,_ = env.step(action)</span><br><span class="line">                    done = done <span class="keyword">or</span> truncated</span><br><span class="line">                    replay_buffer.add(state,action,reward,next_state,done)</span><br><span class="line">                    state = next_state</span><br><span class="line">                    episode_return += reward</span><br><span class="line">                    <span class="comment"># 当replay_buffer中的数据超过设定的值后，才开始训练</span></span><br><span class="line">                    <span class="keyword">if</span> replay_buffer.size() &gt; minimal_size:</span><br><span class="line">                        s,a,r,ns,d = replay_buffer.sample(batch_size)</span><br><span class="line">                        <span class="comment">#将采样的值加入transition_dict中</span></span><br><span class="line">                        transition_dict = &#123;</span><br><span class="line">                                            <span class="string">&#x27;states&#x27;</span> : s,</span><br><span class="line">                                            <span class="string">&#x27;actions&#x27;</span> : a,</span><br><span class="line">                                            <span class="string">&#x27;rewards&#x27;</span> : r,</span><br><span class="line">                                            <span class="string">&#x27;next_states&#x27;</span> : ns,</span><br><span class="line">                                            <span class="string">&#x27;dones&#x27;</span> : d</span><br><span class="line">                                            &#125;</span><br><span class="line">                        agent.update(transition_dict)</span><br><span class="line">                <span class="comment"># 在一个episode完成后在return_list中添加这一段的return</span></span><br><span class="line">                return_list.append(episode_return)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 每10个episode打印一次统计信息</span></span><br><span class="line">                <span class="keyword">if</span> (i_episode + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                    pbar.set_postfix(&#123;</span><br><span class="line">                        <span class="string">&#x27;episode&#x27;</span>:</span><br><span class="line">                        <span class="string">&#x27;%d&#x27;</span> % (num_episodes / <span class="number">10</span> * i + i_episode + <span class="number">1</span>),</span><br><span class="line">                        <span class="string">&#x27;return&#x27;</span>:</span><br><span class="line">                        <span class="string">&#x27;%.3f&#x27;</span> % np.mean(return_list[-<span class="number">10</span>:])</span><br><span class="line">                    &#125;)</span><br><span class="line">                <span class="comment"># 每完成一个episode，进度条就会更新一步</span></span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">episodes_list = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(return_list)))</span><br><span class="line">plt.plot(episodes_list, return_list)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Episodes&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Returns&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;DQN on &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(env_name))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">mv_return = rl_utils.moving_average(return_list, <span class="number">9</span>)</span><br><span class="line">plt.plot(episodes_list, mv_return)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Episodes&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Returns&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;DQN on &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(env_name))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>运行代码，得到策略总回报Return与训练次数Episode的关系图</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic.imgdb.cn/item/66f0221ff21886ccc0b8305f.png" style="width:400px;"/></div></div>
<p>可以看到，在训练了大概100次之后，策略的Return陡然上升，很快收敛到最优值200。但我们也可以看到，在 DQN 的性能得到提升后，它会持续出现一定程度的震荡，这主要是神经网络过拟合到一些局部经验数据后由$argmax$运算带来的影响。</p>
<h1 id="Dueling-DQN"><a href="#Dueling-DQN" class="headerlink" title="Dueling DQN"></a>Dueling DQN</h1><p>Dueling DQN是DQN的改进算法,它能够很好地学习到不同动作的差异性，在动作空间较大的环境下非常有效。</p>
<h2 id="Dueling-DQN优化之处"><a href="#Dueling-DQN优化之处" class="headerlink" title="Dueling DQN优化之处"></a>Dueling DQN优化之处</h2><p>我们定义$A(s,a)=Q(s,a)-V(s)$,$A(s,a)$为每个动作的优势函数。Dueling DQN将价值函数$V(s)$与优势函数$A(s,a)$分别建模，作为神经网络的两个不同分支来输出，然后求和得到Q值。将状态价值函数和优势函数分别建模的好处在于：某些情境下智能体只会关注状态的价值，而并不关心不同动作导致的差异，此时将二者分开建模能够使智能体更好地处理与动作关联较小的状态。</p>
<script type="math/tex; mode=display">Q(s, a) = V(s) + \left( A(s, a) - \frac{1}{|A|} \sum_{a'} A(s, a') \right)</script><p>这个公式中的修正部分$\left( A(s, a) - \frac{1}{|A|} \sum_{a’} A(s, a’) \right)$表示从优势函数中减去其均值，从而保证所有动作的平均优势为零。Dueling DQN能更高效学习状态价值函数。每一次更新时，函数都会被更新，这也会影响到其他动作的Q值。而传统的DQN只会更新某个动作的Q值，其他动作的Q值就不会更新。因此，Dueling DQN能够更加频繁、准确地学习状态价值函数。</p>
<h3 id="Dueling-DQN代码实现"><a href="#Dueling-DQN代码实现" class="headerlink" title="Dueling DQN代码实现"></a>Dueling DQN代码实现</h3><h4 id="神经网络部分的修改"><a href="#神经网络部分的修改" class="headerlink" title="神经网络部分的修改"></a>神经网络部分的修改</h4><p>修改为输出两个分支，再求和<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VAnet</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,state_dim,hidden_dim,action_dim</span>):</span><br><span class="line">        <span class="comment"># 调用torch.nn.Module父类的构造函数</span></span><br><span class="line">        <span class="built_in">super</span>(VAnet,<span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = torch.nn.Linear(state_dim,hidden_dim)</span><br><span class="line">        <span class="comment"># A网络分支</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = torch.nn.Linear(hidden_dim,action_dim)</span><br><span class="line">        <span class="comment"># V网络分支</span></span><br><span class="line">        <span class="variable language_">self</span>.fc3 = torch.nn.Linear(hidden_dim,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        A = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        V = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="comment"># A.mean(1)对A在动作维度求平均，变为一维，需要view(-1,1)reshape为二维</span></span><br><span class="line">        Q = V + A - A.mean(<span class="number">1</span>).view(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> Q</span><br></pre></td></tr></table></figure></p>
<h4 id="算法部分"><a href="#算法部分" class="headerlink" title="算法部分"></a>算法部分</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">      <span class="comment"># DQN算法，包括Double DQN和Dueling DQN</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DQN</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,state_dim,hidden_dim,action_dim,learning_rate,gamma,epsilon,target_update,device,dqn_type = <span class="string">&#x27;VanillaDQN&#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.action_dim = action_dim</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Dueling DQN采取不同的网络框架</span></span><br><span class="line">        <span class="keyword">if</span> dqn_type == <span class="string">&#x27;DuelingDQN&#x27;</span>:</span><br><span class="line">           <span class="variable language_">self</span>.q_net = D_DQN_Net.VAnet(state_dim,hidden_dim,<span class="variable language_">self</span>.action_dim).to(device)</span><br><span class="line">           <span class="variable language_">self</span>.target_q_net = D_DQN_Net.VAnet(state_dim,hidden_dim,<span class="variable language_">self</span>.action_dim).to(device)</span><br><span class="line">        <span class="comment"># 另一套采取DQN网络框架</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.q_net = D_DQN_Net.Qnet(state_dim,hidden_dim,<span class="variable language_">self</span>.action_dim).to(device)</span><br><span class="line">            <span class="variable language_">self</span>.q_net = D_DQN_Net.Qnet(state_dim,hidden_dim,<span class="variable language_">self</span>.action_dim).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.optimizer = torch.optim.Adam(<span class="variable language_">self</span>.q_net.parameters(),lr=learning_rate)</span><br><span class="line">        <span class="variable language_">self</span>.gamma = gamma</span><br><span class="line">        <span class="variable language_">self</span>.epsilon = epsilon</span><br><span class="line">        <span class="variable language_">self</span>.target_update = target_update</span><br><span class="line">        <span class="variable language_">self</span>.count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.dqn_type = dqn_type</span><br><span class="line">        <span class="variable language_">self</span>.device = device</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">take_action</span>(<span class="params">self,state</span>):</span><br><span class="line">           <span class="comment"># 生成一个[0,action_dim-1]的随机整数,若小于ε，则随机选取一个action</span></span><br><span class="line">        <span class="keyword">if</span> np.random.random() &lt; <span class="variable language_">self</span>.epsilon:</span><br><span class="line">            action = np.random.randint(<span class="variable language_">self</span>.action_dim)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            state = torch.tensor([state],dtype=torch.<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">            <span class="comment"># 返回使得q值最大的动作</span></span><br><span class="line">            <span class="comment"># item()将张量中的单个元素转为Python标量</span></span><br><span class="line">            action = <span class="variable language_">self</span>.q_net.forward(state).argmax().item()</span><br><span class="line">        <span class="keyword">return</span> action</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 寻找最大的q值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">max_q_value</span>(<span class="params">self,state</span>):</span><br><span class="line">        state = torch.tensor([state],dtype=<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.q_net(state).<span class="built_in">max</span>().item()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self,transition_dict</span>):</span><br><span class="line">        states = torch.tensor(transition_dict[<span class="string">&#x27;states&#x27;</span>],dtype=torch.<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        <span class="comment"># actions转换为张量后仍然是一维，需要通过view(-1,1)reshape一下成为二维</span></span><br><span class="line">        actions = torch.tensor(transition_dict[<span class="string">&#x27;actions&#x27;</span>]).view(-<span class="number">1</span>,<span class="number">1</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        rewards = torch.tensor(transition_dict[<span class="string">&#x27;rewards&#x27;</span>]).view(-<span class="number">1</span>,<span class="number">1</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        next_states = torch.tensor(transition_dict[<span class="string">&#x27;next_states&#x27;</span>],dtype=torch.<span class="built_in">float</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        dones = torch.tensor(transition_dict[<span class="string">&#x27;dones&#x27;</span>],dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>,<span class="number">1</span>).to(<span class="variable language_">self</span>.device)</span><br><span class="line">        <span class="comment"># 在动作维度，根据采取的动作的标号选取每个采样state的q</span></span><br><span class="line">        q_values = <span class="variable language_">self</span>.q_net(states).gather(<span class="number">1</span>,actions)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断使用的是DoubleDQN还是普通DQN</span></span><br><span class="line">        <span class="comment"># DoubleDQN先选取能取到最大q的action，然后用action更新目标网络的q</span></span><br><span class="line">        <span class="comment"># 普通DQN是直接获取最大的q更新目标网络</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.dqn_type == <span class="string">&#x27;DoubleDQN&#x27;</span>:</span><br><span class="line">            max_action = <span class="variable language_">self</span>.q_net.forward(next_states).<span class="built_in">max</span>(<span class="number">1</span>)[<span class="number">1</span>].view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            max_next_q_values = <span class="variable language_">self</span>.target_q_net.forward(next_states).gather(<span class="number">1</span>, max_action)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max_next_q_values = <span class="variable language_">self</span>.target_q_net.forward(next_states).<span class="built_in">max</span>(<span class="number">1</span>)[<span class="number">0</span>].view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        q_targets = rewards + <span class="variable language_">self</span>.gamma * max_next_q_values * (<span class="number">1</span>-dones)</span><br><span class="line">          </span><br><span class="line">        dqn_loss = torch.mean(F.mse_loss(q_values, q_targets))</span><br><span class="line">        <span class="variable language_">self</span>.optimizer.zero_grad()</span><br><span class="line">        dqn_loss.backward()</span><br><span class="line">        <span class="variable language_">self</span>.optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.count % <span class="variable language_">self</span>.target_update == <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.target_q_net.load_state_dict(<span class="variable language_">self</span>.q_net.state_dict())</span><br><span class="line">        <span class="variable language_">self</span>.count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="参数设定与开始训练"><a href="#参数设定与开始训练" class="headerlink" title="参数设定与开始训练"></a>参数设定与开始训练</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">2e-3</span></span><br><span class="line">num_episodes = <span class="number">1000</span></span><br><span class="line">hidden_dim = <span class="number">128</span></span><br><span class="line">gamma = <span class="number">0.98</span></span><br><span class="line">epsilon = <span class="number">0.01</span></span><br><span class="line">target_update = <span class="number">10</span></span><br><span class="line">buffer_size = <span class="number">10000</span></span><br><span class="line">minimal_size = <span class="number">500</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span>) <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">env_name = <span class="string">&#x27;CartPole-v0&#x27;</span></span><br><span class="line">env = gym.make(env_name)</span><br><span class="line"></span><br><span class="line">state_dim = env.observation_space.shape[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取动作空间的维度</span></span><br><span class="line">action_dim = env.action_space.n</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">0</span>)</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">env.reset(seed=<span class="number">0</span>)</span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">replay_buffer = D_DQN_Net.ReplayBuffer(buffer_size)</span><br><span class="line">agent = D_DQN_Algorithm.DQN(state_dim,hidden_dim,action_dim,lr,gamma,epsilon,target_update,device,<span class="string">&#x27;DuelingDQN&#x27;</span>)</span><br><span class="line"></span><br><span class="line">return_list = []</span><br><span class="line"><span class="comment"># 进行10次大的迭代</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># 每次迭代中，每迭代总次数的十分之一就更新一次进度条</span></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="built_in">int</span>(num_episodes / <span class="number">10</span>), desc=<span class="string">&#x27;Iteration %d&#x27;</span> % i) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="comment"># 每次大迭代中执行 num_episodes/10 次的小循环</span></span><br><span class="line">        <span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(num_episodes / <span class="number">10</span>)):</span><br><span class="line">                episode_return = <span class="number">0</span></span><br><span class="line">                <span class="comment"># 找到初始状态</span></span><br><span class="line">                state = env.reset()</span><br><span class="line">                <span class="comment"># 由于env.reset()返回值是一个元组，其中第一个元素是包含状态的NumPy数组，第二个元素是额外的信息字典，我们需要取第一个Numpy数组</span></span><br><span class="line">                state = state[<span class="number">0</span>]</span><br><span class="line">                done = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">                    <span class="comment"># 在state状态根据ε-Greedy选择一个动作</span></span><br><span class="line">                    action = agent.take_action(state)</span><br><span class="line">                    next_state,reward,done,truncated,_ = env.step(action)</span><br><span class="line">                    done = done <span class="keyword">or</span> truncated</span><br><span class="line">                    replay_buffer.add(state,action,reward,next_state,done)</span><br><span class="line">                    state = next_state</span><br><span class="line">                    episode_return += reward</span><br><span class="line">                    <span class="comment"># 当replay_buffer中的数据超过设定的值后，才开始训练</span></span><br><span class="line">                    <span class="keyword">if</span> replay_buffer.size() &gt; minimal_size:</span><br><span class="line">                        s,a,r,ns,d = replay_buffer.sample(batch_size)</span><br><span class="line">                        <span class="comment">#将采样的值加入transition_dict中</span></span><br><span class="line">                        transition_dict = &#123;</span><br><span class="line">                                            <span class="string">&#x27;states&#x27;</span> : s,</span><br><span class="line">                                            <span class="string">&#x27;actions&#x27;</span> : a,</span><br><span class="line">                                            <span class="string">&#x27;rewards&#x27;</span> : r,</span><br><span class="line">                                            <span class="string">&#x27;next_states&#x27;</span> : ns,</span><br><span class="line">                                            <span class="string">&#x27;dones&#x27;</span> : d</span><br><span class="line">                                            &#125;</span><br><span class="line">                        agent.update(transition_dict)</span><br><span class="line">                <span class="comment"># 在一个episode完成后在return_list中添加这一段的return</span></span><br><span class="line">                return_list.append(episode_return)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 每10个episode打印一次统计信息</span></span><br><span class="line">                <span class="keyword">if</span> (i_episode + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                    pbar.set_postfix(&#123;</span><br><span class="line">                        <span class="string">&#x27;episode&#x27;</span>:</span><br><span class="line">                        <span class="string">&#x27;%d&#x27;</span> % (num_episodes / <span class="number">10</span> * i + i_episode + <span class="number">1</span>),</span><br><span class="line">                        <span class="string">&#x27;return&#x27;</span>:</span><br><span class="line">                        <span class="string">&#x27;%.3f&#x27;</span> % np.mean(return_list[-<span class="number">10</span>:])</span><br><span class="line">                    &#125;)</span><br><span class="line">                <span class="comment"># 每完成一个episode，进度条就会更新一步</span></span><br><span class="line">                pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">episodes_list = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(return_list)))</span><br><span class="line">mv_return = rl_utils.moving_average(return_list, <span class="number">5</span>)</span><br><span class="line">plt.plot(episodes_list, mv_return)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Episodes&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Returns&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Dueling DQN on &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(env_name))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>运行代码，训练完成后得到</p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic.imgdb.cn/item/66f029b9f21886ccc0c10afd.png" style="width:400px;"/></div></div>
<div class="tip bell"><p>这里出现了一个问题，为什么这里收敛的速度比DQN收敛的慢很多，这不是说明Dueling DQN的性能很差吗？</p>
<p>了解后发现，对于Cartpole环境来说，它的动作空间只有2维，复杂度很低，所以在这种情况下，Dueling DQN不能体现出优势，又由于相对DQN较复杂的神经网络运算方法，导致效率比较低。如果将环境换为更复杂的情况，那么收敛速度将明显快于DQN。</p>
</div>
<details class="folding-tag" cyan><summary> 完整源代码点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="RL_Practice" href="https://github.com/Lor1keet/RL_Practice"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">RL_Practice</p><p class="url">https://github.com/Lor1keet/RL_Practice</p></div></a></div>
              </div>
            </details>
<div class='checkbox checked'><input type="radio" checked="checked"/>
            <p>环境的改变后的代码待补充…还没做</p>
            </div>
]]></content>
      <categories>
        <category>Reinforce Learing</category>
      </categories>
      <tags>
        <tag>Reinforce Learing</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建与魔改汇总</title>
    <url>/2024/09/19/%E4%BB%8E%E8%BF%99%E9%87%8C%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="一切从这里开始"><a href="#一切从这里开始" class="headerlink" title="一切从这里开始"></a>一切从这里开始</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ciallo!&quot;</span>)</span><br></pre></td></tr></table></figure>
<span class='p blue'>粗略完成了blog的搭建，说是搭建，事实上也只是站在前人的肩膀上按部就班地组装hexo这个框架。为了方便以后更好地维护和查找问题，在下面列出一些至今用到的各类连接。</span>
<del>静态页面太折磨了Orz</del>
<h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="Hexo+Next主题搭建个人博客+优化全过程（完整详细版）" href="https://zhuanlan.zhihu.com/p/618864711"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">Hexo+Next主题搭建个人博客+优化全过程（完整详细版）</p><p class="url">https://zhuanlan.zhihu.com/p/618864711</p></div></a></div>
              </div>
            </details>
<p>原博主已经弃坑Hexo，改用Notion + vercel搭建博客了，不过留下的内容足够详细，可供参考。</p>
<h2 id="客制化相关"><a href="#客制化相关" class="headerlink" title="客制化相关"></a>客制化相关</h2><h3 id="配置自定义css与js文件"><a href="#配置自定义css与js文件" class="headerlink" title="配置自定义css与js文件"></a>配置自定义css与js文件</h3><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="Hexo博客添加自定义css和js文件" href="https://blog.leonus.cn/2022/custom.html"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">Hexo博客添加自定义css和js文件</p><p class="url">https://blog.leonus.cn/2022/custom.html</p></div></a></div>
              </div>
            </details>
<h3 id="首页文章滑动卡片布局"><a href="#首页文章滑动卡片布局" class="headerlink" title="首页文章滑动卡片布局"></a>首页文章滑动卡片布局</h3><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="双栏布局首页卡片魔改教程" href="https://akilar.top/posts/d6b69c49/"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">双栏布局首页卡片魔改教程</p><p class="url">https://akilar.top/posts/d6b69c49/</p></div></a></div>
              </div>
            </details>
<h3 id="外挂标签PLUS"><a href="#外挂标签PLUS" class="headerlink" title="外挂标签PLUS"></a>外挂标签PLUS</h3><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="Tag Plugins Plus" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">Tag Plugins Plus</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div>
              </div>
            </details>
<details class="folding-tag" cyan><summary> 注意事项 </summary>
              <div class='content'>
              <div class="tip bell"><p>使用此教程中的链接卡片时，教程中并没有说如何添加默认图片。经网页审查元素发现，头图地址默认指向 <span class='p red'><a href="https://你的用户名.github.io/img/link.png">https://你的用户名.github.io/img/link.png</a></span><br>如果不想给每个链接都添加一个图片地址，那么可以把图片链接留空，并在 <span class='p red'>根目录/soure</span> 下新建一个img文件夹，在文件夹中放入你想要的默认图片，并重命名为 <span class='p red'>link.png</span> 即可</p></div>
              </div>
            </details>
<h3 id="时间轴添加对应生肖"><a href="#时间轴添加对应生肖" class="headerlink" title="时间轴添加对应生肖"></a>时间轴添加对应生肖</h3><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="Archive Beautify" href="https://akilar.top/posts/22257072/"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">Archive Beautify</p><p class="url">https://akilar.top/posts/22257072/</p></div></a></div>
              </div>
            </details>
<h3 id="入站Loading动画"><a href="#入站Loading动画" class="headerlink" title="入站Loading动画"></a>入站Loading动画</h3><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="Heo同款loading动画" href="https://blog.anheyu.com/posts/52d8.html"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">Heo同款loading动画</p><p class="url">https://blog.anheyu.com/posts/52d8.html</p></div></a></div>
              </div>
            </details>
<h3 id="页面切换时更改网站标题"><a href="#页面切换时更改网站标题" class="headerlink" title="页面切换时更改网站标题"></a>页面切换时更改网站标题</h3><details class="folding-tag" cyan><summary> 点这里 </summary>
              <div class='content'>
              <div class="tag link"><a class="link-card" title="网站恶搞标题" href="https://www.fomal.cc/posts/d1927166.html#%E7%BD%91%E7%AB%99%E6%81%B6%E6%90%9E%E6%A0%87%E9%A2%98"><div class="left"><img src="/img/link.png"/></div><div class="right"><p class="text">网站恶搞标题</p><p class="url">https://www.fomal.cc/posts/d1927166.html#%E7%BD%91%E7%AB%99%E6%81%B6%E6%90%9E%E6%A0%87%E9%A2%98</p></div></a></div>
              </div>
            </details>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">//动态标题</span><br><span class="line">var OriginTitile = document.title;</span><br><span class="line">var titleTime;</span><br><span class="line">document.addEventListener(<span class="string">&quot;visibilitychange&quot;</span>, function () &#123;</span><br><span class="line">  <span class="keyword">if</span> (document.hidden) &#123;</span><br><span class="line">    //离开当前页面时标签显示内容</span><br><span class="line">    document.title = <span class="string">&quot;再会了，雷狼龙&quot;</span>;</span><br><span class="line">    clearTimeout(titleTime);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    //返回当前页面时标签显示内容</span><br><span class="line">    document.title = <span class="string">&quot;我即优雅又充满良心&quot;</span>;</span><br><span class="line">    //四秒后变回正常标题</span><br><span class="line">    titleTime = setTimeout(function () &#123;</span><br><span class="line">      document.title = OriginTitile;</span><br><span class="line">    &#125;, <span class="number">4000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>RL算法之策略梯度算法（Policy Gradient Algorithm)</title>
    <url>/2024/09/23/AC/</url>
    <content><![CDATA[<h1 id="策略梯度算法的基本概念"><a href="#策略梯度算法的基本概念" class="headerlink" title="策略梯度算法的基本概念"></a>策略梯度算法的基本概念</h1><p>策略梯度算法（Policy Gradient Algorithm）是一种直接优化策略的方法。与基于值函数的方法（如DQN）不同，策略梯度算法直接对策略进行参数化，并通过优化一个目标函数（通常是期望回报）来学习最优策略。</p>
<p>策略梯度算法的基本思想是：通过优化策略的参数，使得在与环境交互时，智能体能够获得最大化的累积回报。</p>
<h2 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h2><p>策略梯度算法是为了优化这么一个目标函数：</p>
<script type="math/tex; mode=display">
J(\theta)=\mathbb{E}\left[\sum_{t=0}^\infty\gamma^tR_{t+1}\right]</script><p>其中：</p>
<ul>
<li>$π_{\theta}$​表示当前参数化的策略</li>
<li>$γ$是折扣因子</li>
<li>$R_{t+1}$是智能体在时间t时执行动作得到的reward</li>
</ul>
<p>且可以证明，$J(\theta)=\overline{V_{\pi}}$</p>
<h2 id="REINFORECE算法"><a href="#REINFORECE算法" class="headerlink" title="REINFORECE算法"></a>REINFORECE算法</h2><p>先对目标函数求梯度</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta)=\nabla_\theta\mathbb{E}\left[\sum_{t=0}^\infty\gamma^tR_{t+1}\right]</script><p>可以写成如下的形式</p>
<script type="math/tex; mode=display">
\nabla_\theta J(\theta)=\sum_{s\in\mathcal{S}}\eta(s)\sum_{a\in\mathcal{A}}\nabla_\theta\pi(a|s,\theta)q_\pi(s,a)=
\mathbb{E}\big[\nabla_\theta\ln\pi(A|S,\theta)q_\pi(S,A)\big]</script><p>我们要知道这个式子的expectation，而在实际情况中，我们是无法得到的。但根据stochastic gradient descent的基本思路，我们可以用采样来近似这个expectation，得到</p>
<script type="math/tex; mode=display">
\nabla_{\theta}J(\theta){\approx}\nabla_{\theta}\ln\pi(a|s,\theta)q_{\pi}(s,a)</script><p>由于$q<em>{\pi}$是未知的，我们可以把$q</em>{\pi}$替换成$q_t$</p>
<script type="math/tex; mode=display">
\theta_{t+1}=\theta_t+\alpha\nabla_\theta\ln\pi(a_t|s_t,\theta_t)q_t(s_t,a_t)</script><p>为了使$q<em>t$能近似$q</em>{\pi}$，我们采取Monte-Carlo方法</p>
<script type="math/tex; mode=display">
q_t(s_t, a_t) = \sum_{k=t+1}^{T} \gamma^{k-t-1} r_k</script><p>得到的这样一个算法便称为REINFORCE。</p>
<h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>REINFORCE算法的伪代码</p>
<p><strong>Pseudocode: Policy Gradient by Monte Carlo (REINFORCE)</strong></p>
<p><strong>Initialization:</strong> A parameterized function $\pi(a|s,\theta)$, $\gamma \in (0, 1)$, and $\alpha &gt; 0$.</p>
<p><strong>Aim:</strong> Search for an optimal policy maximizing $J(\theta)$.</p>
<p>For the $k^{th}$ iteration, do</p>
<p>Select $s<em>0$ and generate an episode following $\pi(\theta_k)$. Suppose the episode is ${s_0, a_0, r_1,…, s</em>{T-1}, a_{T-1}, r_T}$.</p>
<p>For $(t = 0, 1, … , T-1)$, do</p>
<ul>
<li><strong>Value update:</strong><br>$q<em>t(s_t, a_t) = \sum</em>{k=t+1}^{T} \gamma^{k-t-1} r_k$</li>
<li><strong>Policy update:</strong><br>$\theta<em>{t+1} = \theta_t + \alpha \nabla</em>{\theta} \ln \pi(a_t | s_t, \theta_t) q_t(s_t, a_t)$</li>
</ul>
<p>$\theta_k = \theta_T$</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li>过两天补</li>
</ul>
]]></content>
      <categories>
        <category>Reinforce Learing</category>
      </categories>
      <tags>
        <tag>Reinforce Learing</tag>
      </tags>
  </entry>
</search>
